# This command file creates the following memory layout:
#
#			+-----------+
#			|	code	|
#			+-----------+
#			|	rdata	|
#			+-----------+	<------+
#			|	sdata	|		   ^
#			|			|		  32k
#			|           |          v
#			|			|	<------+--- gp
#			|	sbss	|
#			+-----------+
#			|	data	|
#			|	bss		|
#			+-----------+
#			|	init	|
#			+-----------+
#
#
# The code and the rdata segment are linked at an 
# absolute address in memory and the S-records will be 
# downloaded to that address.
#
# The other sections are linked at absolute address 0, 
# but in order to make the testing procedure simpler, 
# the S-records will be downloaded to their final 
# memory location.

# The LENGTH parameter is the maximum size allocated for 
# that segment of memory.  If the LENGTH is 0, the 
# linker will use as much of memory as needed even if it
# overflows on the next segment.

# In PID mode the data segments must have a 0 origin.
# See later how we will load them

MEMORY {	
	CODE	(RX) :	ORIGIN = 0xa0020000, LENGTH = 0x40000
	DATA	(RW) :	ORIGIN = 0x00000000, LENGTH = 0x20000
}


# In the following we have:
#
#	_ROM_size:		current total contribution to the ROM size
#	_ROM_address:	current position to download the S-record
 	
SECTIONS {

	_ROM_size = 0;

	
	# By default use the current virtual address for ROM address

	..code :
	{
		_ROM_address = .;
		_ftext = .;

		############################################################
		# This is only needed for C++.  The code for the static 
		# initializers belongs to the .init section.  This code is 
		# executed only once, and can be executed from ROM.
		############################################################

		*	(.init)
		
		
		*	(.text)			 
		_etext = .;
	
	
		# Include the .rodata section

		*	(.rodata)


		# Include the exception index section and the exception
		# data.  All the exception tables can be kept in ROM since
		# all the addresses they contains are PC relative.

		__exception_table_start__ (A) = .;
		EXCEPTION			# Only needed in C++
		__exception_table_end__ (A) = .;
		*	(.exception)
			
		. = ALIGN(8);
	} > CODE
	
	
	# Add the contribution of the ..code section

	_ROM_size = _ROM_size + SIZEOF(..code);
	_ROM_address = _ROM_address + SIZEOF(..code);
	
	
	# Link the .sdata and .sbss section at address 0 and set GP
	# to point 32K past the beginning of this section.  This section
	# will be loaded just after the .text section
	
	..sdata : AT (_ROM_address)
	{
		# The .sbss section MUST follow the .sdata section and 
		# _gp must point 32K inside the .sdata section.  This 
		# is required by the ABI.  Note _gp is the only symbol
		# known to the linker.  Do not change the name.
		
		_fsdata = .;
	
			_gp = . + 0x00008000;
			_final_gp = _ROM_address + 0x00008000;
	
			LITERAL
			. = ALIGN(0x8);

			*	(.sdata)
			. = ALIGN(0x8);
	
		_esdata = .;
		
		_fsbss = .;

			*	(.sbss)
			. = ALIGN(0x8);

		_esbss = .;
	} > DATA
	
	
	# Add the .sdata contribution to the ROM size

	_ROM_size = _ROM_size + (_esdata - _fsdata);
	
	# Add the .sdata & .sbss contribution to the
	# ROM address

	_ROM_address = _ROM_address + SIZEOF(..sdata);
			
	
	# Link the .data and .bss section at the address just after 
	# ..sdata and load it at _ROM_address
	
	..data : AT (_ROM_address)
	{
		# Put the rest of the data after the .sbss section.
		
		. = _esbss;	# Link at the address after .sbss
		
		_fdata = .;
			*	(.data)

			# This part is only needed for C++
			# In PIC/PID we need to put all these sections in a
			# writable area.
		
			. = ALIGN(4);
			*	(.vtables)

			. = ALIGN(8);
		_edata = .;

		_fbss = .;
			*	(.bss)
			. = ALIGN(0x8);
		_ebss = .;	
		
		
		# Put the COMMON section at the end.  The Metrowerks MIPS
		# C compiler do not generate COMMON sections, but they can 
		# be found in imported libraries.
		
		*	(COMMON)
	}

	
	# Add the .data contribution to the ROM size

	_ROM_size = _ROM_size + (_edata - _fdata);
		

	# Add the .data & .bss contribution to the
	# ROM address

	_ROM_address = _ROM_address + SIZEOF(..data);
			
		
	# Load the ROM data image just after the ..data section, 
	# This section does not contain address pointing into itself
	# so it really does not matter at what address it is linked at.
	# This section is no longer needed after the program has started.
	
	..init : AT (_ROM_address)
	{		
		. = ALIGN(4);	
		
		############################################################
		# Table of pointer to the static initializers.  This is only
		# needed for C++ programs.
		############################################################

		__static_init (D) = .;
		*	(.ctor)
		__static_init_end (D) = .;
	
				
		############################################################
		# In PIC or PID mode the compiler generate 2 list of 
		# relocations that have to be performed at runtime.  This is
		# needed for constructs that are initialized with what 
		# should an absolute address.  For example:
		#
		#	extern int foo;
		#	int *pfoo = &foo;
		#
		# For such a construct the compiler generates an object 
		# called .pid_pfoo in the section .piddynrel.  The .pid_pfoo
		# object contains a list of addresses where a runtime 
		# relocation must be applied on the object pfoo.
		#
		############################################################

		__dynrelopic (D) = .;
		*	(.picdynrel)
		__dynrelopic_end (D) = .;

		__dynrelopid (D) = .;
		*	(.piddynrel)
		__dynrelopid_end (D) = .;
	}


	# Add the init contribution to the ROM address
	
	_ROM_address = _ROM_address + SIZEOF(..init);
		
	
	# Allocate some space for the stack.  The stack grows from 
	# high addresses to low addresses.  It is OK for the stack 
	# to overrun the ..init section as long as it does not 
	# happen during startup time.
	# Make sure the stack is 8 byte aligned
	
	_stack_addr = . + 0x20000;
	_stack_addr = (_stack_addr + 15) & ~15;
	

	# Allocate space for the heap.
	
	_heap_addr = _stack_addr;		# This is used by MSL
	_heap_end = _heap_addr + 400*1024;
}

