/*  Metrowerks Standard Library  */

/*  $Date: 1999/07/09 20:35:10 $ 
 *  $Revision: 1.8 $ 
 *  $NoKeywords: $ 
 *
 *		Portions Copyright © 1995-1999 Metrowerks, Inc.
 *		All rights reserved.
 */

/**
 **  utility
 **/

#ifndef  _UTILITY
#define  _UTILITY

#include <mslconfig>

#ifndef RC_INVOKED

#pragma options align=native
#if defined(__CFM68K__) && !defined(__USING_STATIC_LIBS__)
	#pragma import on
#endif

#ifndef _MSL_NO_CPP_NAMESPACE
	namespace std {
#endif

//  lib.operators, operators:
#ifndef _MSL_NO_CPP_NAMESPACE
	namespace rel_ops {
#endif

	template<class T>
	inline
	bool
	operator!=(const T& x, const T& y)
	{
		return static_cast<bool>(!(x == y));
	}

	template<class T>
	inline
	bool operator> (const T& x, const T& y)
	{
		return static_cast<bool>(y < x);
	}

	template<class T>
	inline
	bool
	operator<=(const T& x, const T& y)
	{
		return static_cast<bool>(!(y < x));
	}

	template<class T>
	inline
	bool
	operator>=(const T& x, const T& y)
	{
		return static_cast<bool>(!(x < y));
	}

#ifndef _MSL_NO_CPP_NAMESPACE
	}  // std::rel_ops
#endif

//  lib.pairs, pairs:
template <class T1, class T2>
struct pair
{
	typedef T1 first_type;
	typedef T2 second_type;

	T1 first;
	T2 second;
	pair();
	pair(const T1& x, const T2& y);
#ifndef _MSL_NO_MEMBER_TEMPLATE
#ifndef _MSL_MUST_INLINE_MEMBER_TEMPLATE
	template<class U, class V> pair(const pair<U, V>& p);
#else
	template<class U, class V>
	inline
	pair(const pair<U, V>& p)
		: first(p.first),
		  second(p.second)
	{
	}
#endif
#endif
};

template <class T1, class T2>
inline
pair<T1, T2>::pair()
	: first(T1()),
	  second(T2())
{
}

template <class T1, class T2>
inline
pair<T1, T2>::pair(const T1& x, const T2& y)
	: first(x),
	  second(y)
{
}

#ifndef _MSL_NO_MEMBER_TEMPLATE
#ifndef _MSL_MUST_INLINE_MEMBER_TEMPLATE

	template <class T1, class T2>
	template<class U, class V>
	inline
	pair<T1, T2>::pair(const pair<U, V>& p)
		: first(p.first),
		  second(p.second)
	{
	}

#endif
#endif

template <class T1, class T2>
inline
bool
operator==(const pair<T1,T2>& x, const pair<T1,T2>& y)
{
	return static_cast<bool>(x.first == y.first && x.second == y.second);
}

template <class T1, class T2>
inline
bool
operator< (const pair<T1,T2>& x, const pair<T1,T2>& y)
{
	return static_cast<bool>(x.first < y.first ||
	                      (!(y.first < x.first) && x.second < y.second));
}

template <class T1, class T2>
inline
bool
operator!=(const pair<T1,T2>& x, const pair<T1,T2>& y)
{
	return static_cast<bool>(!(x == y));
}

template <class T1, class T2>
inline
bool
operator> (const pair<T1,T2>& x, const pair<T1,T2>& y)
{
	return y < x;
}

template <class T1, class T2>
inline
bool
operator>=(const pair<T1,T2>& x, const pair<T1,T2>& y)
{
	return static_cast<bool>(!(x < y));
}

template <class T1, class T2>
inline
bool
operator<=(const pair<T1,T2>& x, const pair<T1,T2>& y)
{
	return static_cast<bool>(!(y < x));
}

template <class T1, class T2>
inline
pair<T1, T2>
make_pair(const T1& x, const T2& y)
{
	return pair<T1, T2>(x, y);
}

#ifndef _MSL_NO_CPP_NAMESPACE
	} // namespace std
#endif

#if defined(__CFM68K__) && !defined(__USING_STATIC_LIBS__)
	#pragma import reset
#endif
#pragma options align=reset

#endif // RC_INVOKED

#endif // _UTILITY

// hh 971220 fixed MOD_INCLUDE
// hh 971226 Changed filename from utility.h to utility
// hh 971226 Made include guards standard
// hh 971226 added alignment wrapper
// hh 971230 added RC_INVOKED wrapper
// hh 980130 commented out <iosfwd>
// hh 990426 Rewrote.
