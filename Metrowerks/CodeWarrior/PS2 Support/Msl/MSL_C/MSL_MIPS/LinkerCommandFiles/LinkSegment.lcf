MEMORY {
	
	# The LENGTH parameter is the maximum size allocated for 
	# that segment of memory.  If the LENGTH is 0, the 
	# linker will use as much of memory as needed even if it
	# overflows on the next segment.
	
	.text	(RX) :	ORIGIN = 0xa0020000, LENGTH = 0x70000
	.data	(RW) :	ORIGIN = 0xa0090000, LENGTH = 0x20000
	.init	(RW) :	ORIGIN = AFTER(.text, .data), LENGTH = 0x10000
}

SECTIONS {

	..code :
	{
		_ftext = .;
		
		############################################################
		# Select specific objects from specific files.  For example:
		#
		# OBJECT(MIPS_media_extension__Fv, MIPS_mediax.cpp)
		#
		############################################################
		
		*	(.text)			 
		_etext = .;
	
		############################################################
		# This part is only needed for MIPS-16 support	
		#	
		#	_ftext16 = .;
		#	*	(.text16)			 
		#	. = ALIGN(0x8);
		#	_etext16 = .;
		#
		# End of MIPS-16 support
		############################################################


		# Include the .rodata and the .exception sections inside 
		# the code segment.

		*	(.rodata)
		. = ALIGN(0x4);
	} > .text


	..code_cpp:
	{
		# C++ related sections
		
		*	(.vtables)		# Only needed for C++
		*	(.exception)	# Only needed for C++
		
		# Include the exception table index.  
		. = ALIGN(0x4);
		__exception_table_start__ = .;
		EXCEPTION			# Only needed in C++
		__exception_table_end__ = .;
		
	} >> .text
	
	
	..data : 
	{
		*	(.data)
		. = ALIGN(0x8);


		# The .sbss section MUST follow the .sdata section and 
		# _gp must point 32K inside the .sdata section.  This 
		# is required by the ABI.  Note _gp is the only symbol
		# known to the linker.  Don not change the name.
		
		_fsdata = .;
		_gp = _fsdata + 0x00008000;
		
		LITERAL

		*	(.sdata)

		. = ALIGN(16);
		_fsbss = .;
		*	(.sbss)
		*	(SCOMMON)		
		_esbss = .;
		

		# If the initialized and unitialized data are in the same 
		# section, the unitialized data (.bss and COMMON) must be
		# last
		
		. = ALIGN(16);
		_fbss = .;
		*	(.bss)
		*	(COMMON)
		_ebss = .;	

	} > .data


	# Include linker defined symbols (static initializer table)
	# This area of memory is only needed at startup and can be 
	# reclaimed when the main program is activated.
	
	..tmp :
	{
		############################################################
		# This is only needed for C++.  The code for the static 
		# initializers belongs to the .init section.  This code is 
		# executed only once, and can be executed from ROM.
		############################################################

		*	(.init)
		
		__static_init = .;
		*	(.ctor)
		__static_init_end = .;
		
	} > .init		
	
	
	# Allocate some space for the stack.  The stack grows from 
	# high addresses to low addresses.  Note that it is OK to 
	# write over the ..tmp section as long as it is done after
	# the calls to all the static initializers

	_stack_addr = . + 0x20000;
	_stack_addr = (_stack_addr + 15) & ~15;
	
	_heap_addr = _stack_addr;			# This is used by MSL
	_heap_end = _heap_addr + 400*1024;	
}